// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto
#ifndef GRPC_server_2eproto__INCLUDED
#define GRPC_server_2eproto__INCLUDED

#include "server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

class pastebinApi final {
 public:
  static constexpr char const* service_full_name() {
    return "pastebinApi";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::newPasteResponce* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::newPasteResponce>> AsyncmakeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::newPasteResponce>>(AsyncmakeNewPasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::newPasteResponce>> PrepareAsyncmakeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::newPasteResponce>>(PrepareAsyncmakeNewPasteRaw(context, request, cq));
    }
    virtual ::grpc::Status getPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::getPasteResponce* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getPasteResponce>> AsyncgetPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getPasteResponce>>(AsyncgetPasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getPasteResponce>> PrepareAsyncgetPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::getPasteResponce>>(PrepareAsyncgetPasteRaw(context, request, cq));
    }
    virtual ::grpc::Status deletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::delPasteResponce* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::delPasteResponce>> AsyncdeletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::delPasteResponce>>(AsyncdeletePasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::delPasteResponce>> PrepareAsyncdeletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::delPasteResponce>>(PrepareAsyncdeletePasteRaw(context, request, cq));
    }
    virtual ::grpc::Status updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::updatePasteResponce* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::updatePasteResponce>> AsyncupdatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::updatePasteResponce>>(AsyncupdatePasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::updatePasteResponce>> PrepareAsyncupdatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::updatePasteResponce>>(PrepareAsyncupdatePasteRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs* request, ::newPasteResponce* response, std::function<void(::grpc::Status)>) = 0;
      virtual void makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs* request, ::newPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void getPaste(::grpc::ClientContext* context, const ::getPasteArgs* request, ::getPasteResponce* response, std::function<void(::grpc::Status)>) = 0;
      virtual void getPaste(::grpc::ClientContext* context, const ::getPasteArgs* request, ::getPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deletePaste(::grpc::ClientContext* context, const ::delPasteArgs* request, ::delPasteResponce* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deletePaste(::grpc::ClientContext* context, const ::delPasteArgs* request, ::delPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response, std::function<void(::grpc::Status)>) = 0;
      virtual void updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::newPasteResponce>* AsyncmakeNewPasteRaw(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::newPasteResponce>* PrepareAsyncmakeNewPasteRaw(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::getPasteResponce>* AsyncgetPasteRaw(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::getPasteResponce>* PrepareAsyncgetPasteRaw(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::delPasteResponce>* AsyncdeletePasteRaw(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::delPasteResponce>* PrepareAsyncdeletePasteRaw(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::updatePasteResponce>* AsyncupdatePasteRaw(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::updatePasteResponce>* PrepareAsyncupdatePasteRaw(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::newPasteResponce* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::newPasteResponce>> AsyncmakeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::newPasteResponce>>(AsyncmakeNewPasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::newPasteResponce>> PrepareAsyncmakeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::newPasteResponce>>(PrepareAsyncmakeNewPasteRaw(context, request, cq));
    }
    ::grpc::Status getPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::getPasteResponce* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getPasteResponce>> AsyncgetPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getPasteResponce>>(AsyncgetPasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getPasteResponce>> PrepareAsyncgetPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::getPasteResponce>>(PrepareAsyncgetPasteRaw(context, request, cq));
    }
    ::grpc::Status deletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::delPasteResponce* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::delPasteResponce>> AsyncdeletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::delPasteResponce>>(AsyncdeletePasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::delPasteResponce>> PrepareAsyncdeletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::delPasteResponce>>(PrepareAsyncdeletePasteRaw(context, request, cq));
    }
    ::grpc::Status updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::updatePasteResponce* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::updatePasteResponce>> AsyncupdatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::updatePasteResponce>>(AsyncupdatePasteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::updatePasteResponce>> PrepareAsyncupdatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::updatePasteResponce>>(PrepareAsyncupdatePasteRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs* request, ::newPasteResponce* response, std::function<void(::grpc::Status)>) override;
      void makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs* request, ::newPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) override;
      void getPaste(::grpc::ClientContext* context, const ::getPasteArgs* request, ::getPasteResponce* response, std::function<void(::grpc::Status)>) override;
      void getPaste(::grpc::ClientContext* context, const ::getPasteArgs* request, ::getPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deletePaste(::grpc::ClientContext* context, const ::delPasteArgs* request, ::delPasteResponce* response, std::function<void(::grpc::Status)>) override;
      void deletePaste(::grpc::ClientContext* context, const ::delPasteArgs* request, ::delPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) override;
      void updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response, std::function<void(::grpc::Status)>) override;
      void updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::newPasteResponce>* AsyncmakeNewPasteRaw(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::newPasteResponce>* PrepareAsyncmakeNewPasteRaw(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::getPasteResponce>* AsyncgetPasteRaw(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::getPasteResponce>* PrepareAsyncgetPasteRaw(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::delPasteResponce>* AsyncdeletePasteRaw(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::delPasteResponce>* PrepareAsyncdeletePasteRaw(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::updatePasteResponce>* AsyncupdatePasteRaw(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::updatePasteResponce>* PrepareAsyncupdatePasteRaw(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_makeNewPaste_;
    const ::grpc::internal::RpcMethod rpcmethod_getPaste_;
    const ::grpc::internal::RpcMethod rpcmethod_deletePaste_;
    const ::grpc::internal::RpcMethod rpcmethod_updatePaste_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status makeNewPaste(::grpc::ServerContext* context, const ::newPasteArgs* request, ::newPasteResponce* response);
    virtual ::grpc::Status getPaste(::grpc::ServerContext* context, const ::getPasteArgs* request, ::getPasteResponce* response);
    virtual ::grpc::Status deletePaste(::grpc::ServerContext* context, const ::delPasteArgs* request, ::delPasteResponce* response);
    virtual ::grpc::Status updatePaste(::grpc::ServerContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_makeNewPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_makeNewPaste() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_makeNewPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeNewPaste(::grpc::ServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmakeNewPaste(::grpc::ServerContext* context, ::newPasteArgs* request, ::grpc::ServerAsyncResponseWriter< ::newPasteResponce>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getPaste() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_getPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPaste(::grpc::ServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPaste(::grpc::ServerContext* context, ::getPasteArgs* request, ::grpc::ServerAsyncResponseWriter< ::getPasteResponce>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deletePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deletePaste() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_deletePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletePaste(::grpc::ServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeletePaste(::grpc::ServerContext* context, ::delPasteArgs* request, ::grpc::ServerAsyncResponseWriter< ::delPasteResponce>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_updatePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_updatePaste() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_updatePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePaste(::grpc::ServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdatePaste(::grpc::ServerContext* context, ::updatePasteArgs* request, ::grpc::ServerAsyncResponseWriter< ::updatePasteResponce>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_makeNewPaste<WithAsyncMethod_getPaste<WithAsyncMethod_deletePaste<WithAsyncMethod_updatePaste<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_makeNewPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_makeNewPaste() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::newPasteArgs, ::newPasteResponce>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::newPasteArgs* request, ::newPasteResponce* response) { return this->makeNewPaste(context, request, response); }));}
    void SetMessageAllocatorFor_makeNewPaste(
        ::grpc::MessageAllocator< ::newPasteArgs, ::newPasteResponce>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::newPasteArgs, ::newPasteResponce>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_makeNewPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeNewPaste(::grpc::ServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* makeNewPaste(
      ::grpc::CallbackServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_getPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_getPaste() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::getPasteArgs, ::getPasteResponce>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::getPasteArgs* request, ::getPasteResponce* response) { return this->getPaste(context, request, response); }));}
    void SetMessageAllocatorFor_getPaste(
        ::grpc::MessageAllocator< ::getPasteArgs, ::getPasteResponce>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::getPasteArgs, ::getPasteResponce>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_getPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPaste(::grpc::ServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPaste(
      ::grpc::CallbackServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deletePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deletePaste() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::delPasteArgs, ::delPasteResponce>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::delPasteArgs* request, ::delPasteResponce* response) { return this->deletePaste(context, request, response); }));}
    void SetMessageAllocatorFor_deletePaste(
        ::grpc::MessageAllocator< ::delPasteArgs, ::delPasteResponce>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::delPasteArgs, ::delPasteResponce>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deletePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletePaste(::grpc::ServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deletePaste(
      ::grpc::CallbackServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_updatePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_updatePaste() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::updatePasteArgs, ::updatePasteResponce>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response) { return this->updatePaste(context, request, response); }));}
    void SetMessageAllocatorFor_updatePaste(
        ::grpc::MessageAllocator< ::updatePasteArgs, ::updatePasteResponce>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::updatePasteArgs, ::updatePasteResponce>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_updatePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePaste(::grpc::ServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updatePaste(
      ::grpc::CallbackServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_makeNewPaste<WithCallbackMethod_getPaste<WithCallbackMethod_deletePaste<WithCallbackMethod_updatePaste<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_makeNewPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_makeNewPaste() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_makeNewPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeNewPaste(::grpc::ServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getPaste() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_getPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPaste(::grpc::ServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deletePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deletePaste() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_deletePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletePaste(::grpc::ServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_updatePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_updatePaste() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_updatePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePaste(::grpc::ServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_makeNewPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_makeNewPaste() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_makeNewPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeNewPaste(::grpc::ServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestmakeNewPaste(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_getPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getPaste() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_getPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPaste(::grpc::ServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetPaste(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deletePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deletePaste() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_deletePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletePaste(::grpc::ServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeletePaste(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_updatePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_updatePaste() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_updatePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePaste(::grpc::ServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestupdatePaste(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_makeNewPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_makeNewPaste() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->makeNewPaste(context, request, response); }));
    }
    ~WithRawCallbackMethod_makeNewPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status makeNewPaste(::grpc::ServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* makeNewPaste(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_getPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_getPaste() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getPaste(context, request, response); }));
    }
    ~WithRawCallbackMethod_getPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getPaste(::grpc::ServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* getPaste(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deletePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deletePaste() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deletePaste(context, request, response); }));
    }
    ~WithRawCallbackMethod_deletePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deletePaste(::grpc::ServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deletePaste(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_updatePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_updatePaste() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->updatePaste(context, request, response); }));
    }
    ~WithRawCallbackMethod_updatePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status updatePaste(::grpc::ServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* updatePaste(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_makeNewPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_makeNewPaste() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::newPasteArgs, ::newPasteResponce>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::newPasteArgs, ::newPasteResponce>* streamer) {
                       return this->StreamedmakeNewPaste(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_makeNewPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status makeNewPaste(::grpc::ServerContext* /*context*/, const ::newPasteArgs* /*request*/, ::newPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedmakeNewPaste(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::newPasteArgs,::newPasteResponce>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getPaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getPaste() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::getPasteArgs, ::getPasteResponce>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::getPasteArgs, ::getPasteResponce>* streamer) {
                       return this->StreamedgetPaste(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getPaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getPaste(::grpc::ServerContext* /*context*/, const ::getPasteArgs* /*request*/, ::getPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetPaste(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::getPasteArgs,::getPasteResponce>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deletePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deletePaste() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::delPasteArgs, ::delPasteResponce>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::delPasteArgs, ::delPasteResponce>* streamer) {
                       return this->StreameddeletePaste(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deletePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deletePaste(::grpc::ServerContext* /*context*/, const ::delPasteArgs* /*request*/, ::delPasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeletePaste(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::delPasteArgs,::delPasteResponce>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_updatePaste : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_updatePaste() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::updatePasteArgs, ::updatePasteResponce>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::updatePasteArgs, ::updatePasteResponce>* streamer) {
                       return this->StreamedupdatePaste(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_updatePaste() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status updatePaste(::grpc::ServerContext* /*context*/, const ::updatePasteArgs* /*request*/, ::updatePasteResponce* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedupdatePaste(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::updatePasteArgs,::updatePasteResponce>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_makeNewPaste<WithStreamedUnaryMethod_getPaste<WithStreamedUnaryMethod_deletePaste<WithStreamedUnaryMethod_updatePaste<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_makeNewPaste<WithStreamedUnaryMethod_getPaste<WithStreamedUnaryMethod_deletePaste<WithStreamedUnaryMethod_updatePaste<Service > > > > StreamedService;
};


#endif  // GRPC_server_2eproto__INCLUDED
