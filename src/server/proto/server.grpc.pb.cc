// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: server.proto

#include "server.pb.h"
#include "server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* pastebinApi_method_names[] = {
  "/pastebinApi/makeNewPaste",
  "/pastebinApi/getPaste",
  "/pastebinApi/deletePaste",
  "/pastebinApi/updatePaste",
};

std::unique_ptr< pastebinApi::Stub> pastebinApi::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< pastebinApi::Stub> stub(new pastebinApi::Stub(channel, options));
  return stub;
}

pastebinApi::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_makeNewPaste_(pastebinApi_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getPaste_(pastebinApi_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_deletePaste_(pastebinApi_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_updatePaste_(pastebinApi_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status pastebinApi::Stub::makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs& request, ::newPasteResponce* response) {
  return ::grpc::internal::BlockingUnaryCall< ::newPasteArgs, ::newPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_makeNewPaste_, context, request, response);
}

void pastebinApi::Stub::async::makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs* request, ::newPasteResponce* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::newPasteArgs, ::newPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_makeNewPaste_, context, request, response, std::move(f));
}

void pastebinApi::Stub::async::makeNewPaste(::grpc::ClientContext* context, const ::newPasteArgs* request, ::newPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_makeNewPaste_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::newPasteResponce>* pastebinApi::Stub::PrepareAsyncmakeNewPasteRaw(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::newPasteResponce, ::newPasteArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_makeNewPaste_, context, request);
}

::grpc::ClientAsyncResponseReader< ::newPasteResponce>* pastebinApi::Stub::AsyncmakeNewPasteRaw(::grpc::ClientContext* context, const ::newPasteArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncmakeNewPasteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status pastebinApi::Stub::getPaste(::grpc::ClientContext* context, const ::getPasteArgs& request, ::getPasteResponce* response) {
  return ::grpc::internal::BlockingUnaryCall< ::getPasteArgs, ::getPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getPaste_, context, request, response);
}

void pastebinApi::Stub::async::getPaste(::grpc::ClientContext* context, const ::getPasteArgs* request, ::getPasteResponce* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::getPasteArgs, ::getPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPaste_, context, request, response, std::move(f));
}

void pastebinApi::Stub::async::getPaste(::grpc::ClientContext* context, const ::getPasteArgs* request, ::getPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getPaste_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::getPasteResponce>* pastebinApi::Stub::PrepareAsyncgetPasteRaw(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::getPasteResponce, ::getPasteArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getPaste_, context, request);
}

::grpc::ClientAsyncResponseReader< ::getPasteResponce>* pastebinApi::Stub::AsyncgetPasteRaw(::grpc::ClientContext* context, const ::getPasteArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetPasteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status pastebinApi::Stub::deletePaste(::grpc::ClientContext* context, const ::delPasteArgs& request, ::delPasteResponce* response) {
  return ::grpc::internal::BlockingUnaryCall< ::delPasteArgs, ::delPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_deletePaste_, context, request, response);
}

void pastebinApi::Stub::async::deletePaste(::grpc::ClientContext* context, const ::delPasteArgs* request, ::delPasteResponce* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::delPasteArgs, ::delPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deletePaste_, context, request, response, std::move(f));
}

void pastebinApi::Stub::async::deletePaste(::grpc::ClientContext* context, const ::delPasteArgs* request, ::delPasteResponce* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_deletePaste_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::delPasteResponce>* pastebinApi::Stub::PrepareAsyncdeletePasteRaw(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::delPasteResponce, ::delPasteArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_deletePaste_, context, request);
}

::grpc::ClientAsyncResponseReader< ::delPasteResponce>* pastebinApi::Stub::AsyncdeletePasteRaw(::grpc::ClientContext* context, const ::delPasteArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdeletePasteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status pastebinApi::Stub::updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::updatePasteResponce* response) {
  return ::grpc::internal::BlockingUnaryCall< ::updatePasteArgs, ::updatePasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_updatePaste_, context, request, response);
}

void pastebinApi::Stub::async::updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::updatePasteArgs, ::updatePasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updatePaste_, context, request, response, std::move(f));
}

void pastebinApi::Stub::async::updatePaste(::grpc::ClientContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_updatePaste_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::updatePasteResponce>* pastebinApi::Stub::PrepareAsyncupdatePasteRaw(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::updatePasteResponce, ::updatePasteArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_updatePaste_, context, request);
}

::grpc::ClientAsyncResponseReader< ::updatePasteResponce>* pastebinApi::Stub::AsyncupdatePasteRaw(::grpc::ClientContext* context, const ::updatePasteArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncupdatePasteRaw(context, request, cq);
  result->StartCall();
  return result;
}

pastebinApi::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pastebinApi_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< pastebinApi::Service, ::newPasteArgs, ::newPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](pastebinApi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::newPasteArgs* req,
             ::newPasteResponce* resp) {
               return service->makeNewPaste(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pastebinApi_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< pastebinApi::Service, ::getPasteArgs, ::getPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](pastebinApi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::getPasteArgs* req,
             ::getPasteResponce* resp) {
               return service->getPaste(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pastebinApi_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< pastebinApi::Service, ::delPasteArgs, ::delPasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](pastebinApi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::delPasteArgs* req,
             ::delPasteResponce* resp) {
               return service->deletePaste(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      pastebinApi_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< pastebinApi::Service, ::updatePasteArgs, ::updatePasteResponce, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](pastebinApi::Service* service,
             ::grpc::ServerContext* ctx,
             const ::updatePasteArgs* req,
             ::updatePasteResponce* resp) {
               return service->updatePaste(ctx, req, resp);
             }, this)));
}

pastebinApi::Service::~Service() {
}

::grpc::Status pastebinApi::Service::makeNewPaste(::grpc::ServerContext* context, const ::newPasteArgs* request, ::newPasteResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status pastebinApi::Service::getPaste(::grpc::ServerContext* context, const ::getPasteArgs* request, ::getPasteResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status pastebinApi::Service::deletePaste(::grpc::ServerContext* context, const ::delPasteArgs* request, ::delPasteResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status pastebinApi::Service::updatePaste(::grpc::ServerContext* context, const ::updatePasteArgs* request, ::updatePasteResponce* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


